static void internal_v1_12_2_chunkData(const uint8_t * data, int dataLen, struct client * c){

    TChunk chunkToLoad;
    //Todo optimize this based on actual section dim
    const int sectionPerChunk = 16;
    chunkToLoad.sectionArr = calloc(sectionPerChunk, sizeof(TChunkSection ));
    chunkToLoad.sectionArrDim = sectionPerChunk;

    chunkToLoad.x = read_int32fromNetworkEndian(data);
    chunkToLoad.z = read_int32fromNetworkEndian(data + 4);
    int groundUpContinous = read_boolean(data + 9);
    TVarInt primaryBitMask = sharedMain_readVarInt(data + 10, VARINTMAXLEN);
    if(primaryBitMask.byteSize < 0)
    {
        printf("Error reading primary bitmask %d, aborting\n", primaryBitMask.byteSize);
        return;
    }

    TVarInt chunkDataLen = sharedMain_readVarInt(primaryBitMask.byteAfterEnd, VARINTMAXLEN);
    if(primaryBitMask.byteSize < 0)
    {
        printf("Error reading chunkDataLen %d, aborting\n", chunkDataLen.byteSize);
        return;
    }

    uint8_t * p = chunkDataLen.byteAfterEnd;
    int i = 0;
    while(primaryBitMask.value != 0){
        i++;
        if(primaryBitMask.value & 1){
            //do stuff here for each chunk sections included
            TChunkSection sectionToLoad;
            int bitsPerBlock = read_uint8fromNetworkEndian(p);
            p++;

            if(bitsPerBlock <= 8)
            {
                if(bitsPerBlock < 4)
                    bitsPerBlock = 4;

                //Process palette
                TVarInt paletteDim = sharedMain_readVarInt(p, VARINTMAXLEN);
                long * paletteArr = malloc(paletteDim.value);
                uint8_t * auxp = paletteDim.byteAfterEnd;
                //read palette
                for(int i = 0; i < paletteDim.value; i++)
                {
                    TVarInt globalPaletteId = sharedMain_readVarInt(auxp, VARINTMAXLEN);
                    paletteArr[i] = globalPaletteId.value;
                    auxp = globalPaletteId.byteAfterEnd;
                }

                //here auxp points to byteAfter end from last varint
                //Read compressed long sectionArr
                //sectionToLoad.sectionArr[y][z][x]

                int blocksPerLong = 64 / bitsPerBlock;  // Number of full blocks in one long

                // Iterate over all block indices in the section
                for (int blockIndex = 0; blockIndex < CHUNKSECTION_BLOCKCOUNT; blockIndex++) {
                    // Find the index of the long that contains the start of this block state
                    int longIndex = (blockIndex * bitsPerBlock) / TYPELONG_BITSIZE;
                    // Find the bit position within that long
                    int bitIndex = (blockIndex * bitsPerBlock) % TYPELONG_BITSIZE;
                    // Read the current long from the buffer (network-endian)
                    int64_t currentLong = read_int64fromNetworkEndian(auxp + (longIndex * 8));

                    int blockState;
                    // If the block state spans two longs
                    if (bitIndex + bitsPerBlock > 64) {
                        // Calculate the number of bits that are in the next long
                        int bitsInNextLong = (bitIndex + bitsPerBlock) - 64;

                        // Mask and shift to get the first part from the current long
                        int firstPart = (currentLong >> bitIndex) & ((1 << (bitsPerBlock - bitsInNextLong)) - 1);

                        // Read the next long from the buffer (network-endian)
                        int64_t nextLong = read_int64fromNetworkEndian(auxp + ((longIndex + 1) * 8));

                        // Get the remainder from the next long
                        int secondPart = nextLong & ((1 << bitsInNextLong) - 1);

                        // Combine both parts to get the full block state
                        blockState = (secondPart << (bitsPerBlock - bitsInNextLong)) | firstPart;
                    } else {
                        // If the block state fits within the current long
                        blockState = (currentLong >> bitIndex) & ((1 << bitsPerBlock) - 1);
                    }

                    // Process the block state (blockState)
                    //processBlockState(blockState);
                    //sectionArr[y][z][x]
                    int x = blockIndex % CHUNKSECTION_DIM;
                    int z = (blockIndex / CHUNKSECTION_DIM) % CHUNKSECTION_DIM;
                    int y = ((blockIndex / CHUNKSECTION_DIM) / CHUNKSECTION_DIM) % CHUNKSECTION_DIM;
                    sectionToLoad.sectionArr[y][z][x].globalId = paletteArr[blockState];
                }
            }
            else
            {
                bitsPerBlock = BITFORSTATEMAYBEIDK;

                p++; // skip over dummy palette

                uint8_t * auxp = p;
                //array of longs
                int blocksPerLong = 64 / bitsPerBlock;  // Number of full blocks in one long

                // Iterate over all block indices in the section
                for (int blockIndex = 0; blockIndex < CHUNKSECTION_BLOCKCOUNT; blockIndex++) {
                    // Find the index of the long that contains the start of this block state
                    int longIndex = (blockIndex * bitsPerBlock) / TYPELONG_BITSIZE;
                    // Find the bit position within that long
                    int bitIndex = (blockIndex * bitsPerBlock) % TYPELONG_BITSIZE;
                    // Read the current long from the buffer (network-endian)
                    int64_t currentLong = read_int64fromNetworkEndian(auxp + (longIndex * 8));

                    int blockState;
                    // If the block state spans two longs
                    if (bitIndex + bitsPerBlock > 64) {
                        // Calculate the number of bits that are in the next long
                        int bitsInNextLong = (bitIndex + bitsPerBlock) - 64;

                        // Mask and shift to get the first part from the current long
                        int firstPart = (currentLong >> bitIndex) & ((1 << (bitsPerBlock - bitsInNextLong)) - 1);

                        // Read the next long from the buffer (network-endian)
                        int64_t nextLong = read_int64fromNetworkEndian(auxp + ((longIndex + 1) * 8));

                        // Get the remainder from the next long
                        int secondPart = nextLong & ((1 << bitsInNextLong) - 1);

                        // Combine both parts to get the full block state
                        blockState = (secondPart << (bitsPerBlock - bitsInNextLong)) | firstPart;
                    } else {
                        // If the block state fits within the current long
                        blockState = (currentLong >> bitIndex) & ((1 << bitsPerBlock) - 1);
                    }

                    // Process the block state (blockState)
                    //processBlockState(blockState);
                    //sectionArr[y][z][x]
                    int x = blockIndex % CHUNKSECTION_DIM;
                    int z = (blockIndex / CHUNKSECTION_DIM) % CHUNKSECTION_DIM;
                    int y = ((blockIndex / CHUNKSECTION_DIM) / CHUNKSECTION_DIM) % CHUNKSECTION_DIM;
                    sectionToLoad.sectionArr[y][z][x].globalId = blockState;
                }
            }

            chunkToLoad.sectionArr[i] = sectionToLoad;
        }
        primaryBitMask.value >>= 1;
    }

    //sucessfully loaded chunk
    //write it to the client hashvec

    int hashKey = hash2d(chunkToLoad.x, chunkToLoad.z);
    printf("Size of TChunkHashNode: %lu\n", sizeof(TChunkHashNode));
    fflush(stdout);
//    TChunkHashList newList = malloc(sizeof(TChunkHashNode));
  //  newList->chunk = chunkToLoad;
  //  newList->tail = c->chunkHashVec[hashKey];
   // c->chunkHashVec[hashKey] = newList;

    printf("Succesfully loaded chunk X: %d, z: %d\n", chunkToLoad.x, chunkToLoad.z);
    fflush(stdout);
}
